# -*- coding: utf-8 -*-
"""Practica1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10qXf-eumlxJxMvWhnsSlZv4uxdWMXHry
"""

import pandas as pd

import numpy as np

import missingno as msno

#Datos desestacionalizados https://www.inegi.org.mx/app/tabulados/default.html?nc=609

path = 'Tabulado Desestacionalizadas.csv'
df = pd.read_csv(path, encoding='latin', error_bad_lines=False)
df.head()

df.info()

df.shape

df.shape[0]

df.shape[1]

df.columns.values.tolist()

df.dtypes

df.isnull().any().any()

msno.matrix(df)

df.replace({' ': np.nan}, inplace=True)

df.isnull().any().any()

msno.matrix(df)

msno.bar(df)

df.columns[df.isnull().any()].tolist()

df.describe()

df.loc[[0]]

df.loc[3:5]

df.drop([0,3,4], axis=0).head()

df.drop(df.index[1:5], axis=0).head(10)

df[10:].head()

df.Total.values

df['Total'].values

df.Total.unique()

df.Total.value_counts()

df.agg(['count','size','unique'])

df.groupby('Total').agg(['count', 'size', 'nunique']).stack()

df.groupby('Total').agg(['count', 'size', 'nunique'])

df_sample = df.sample(frac=0.05, random_state=1)
df_sample.head()

df.shape

df_sample.shape

"""Data Transform"""

df_dropped = df.dropna(subset=['Total'])
df_dropped.head()

df_dropped.shape

df_copy = df.copy()
df_copy.head()

df_copy.shape

df_dropped['Hombres'].dtype

df_dropped['Hombres'].mean()

df_copy['Hombres'].fillna(value=np.round(df['Hombres'].mean(),decimals=0), inplace=True)

df_copy.agg(['count', 'size', 'nunique'])

"""Handling Categorical Data"""

list(df['Periodo'].unique())

df['Periodo'].replace({1:"Periodo I",
                       2:"Periodo II",
                       3:"Periodo III",
                       4:"Periodo IV",
                       5:"A単o2016",
                       6:"A単o2017",
                       7:"A単o2018",
                       8:"A単o2019"}, inplace=True)

list(df['Periodo'].unique())

keys = list(df['Periodo'].unique())
vals = range(1,8)
act = dict(zip(keys, vals))
act

df_copy['Periodo_cat'] = df['Periodo'].map(act)
df_copy.head()

list(df_copy['Periodo_cat'].unique())

"""Data Summarization"""

df_copy['Mujeres'].mean()

df_copy['Mujeres'][df_copy['Periodo'] == 3]

df_copy['Mujeres'][df_copy['Periodo_cat'] == 3].mean()

df_copy.groupby(["Periodo_cat", "Total", "Hombres", "Mujeres"]).count()

df_copy.groupby(["Periodo_cat", "Total", "Hombres", "Mujeres"]).count()

df_copy.groupby(["Periodo_cat", "Total"]) [["Hombres", "Mujeres"]].count()

df_copy.Periodo

df_sample = df.sample(frac=0.05, random_state=1)
df_sample.head()

df_sample.groupby(["Periodo", "Hombres"])[["Mujeres", "Total"]].agg([np.sum, np.mean,
                                                              np.count_nonzero])

"""Data Visualization"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('seaborn-white')

ax1 = plt.axes()  # standard axes
ax2 = plt.axes([0.65, 0.65, 0.2, 0.2])

#The equivalent of this command within the object-oriented interface is fig.add_axes()

fig = plt.figure()
ax1 = fig.add_axes([0.1, 0.5, 0.8, 0.4],
                   xticklabels=[], ylim=(-1.2, 1.2))
ax2 = fig.add_axes([0.1, 0.1, 0.8, 0.4],
                   ylim=(-1.2, 1.2))

x = np.linspace(0, 10)
ax1.plot(np.sin(x))
ax2.plot(np.cos(x))

# The lowest level of these is plt.subplot(), which creates a single subplot within a grid
for i in range(1, 7):
    plt.subplot(2, 3, i)
    plt.text(0.5, 0.5, str((2, 3, i)),
             fontsize=18, ha='center')

# plt.subplots_adjust can be used to adjust the spacing between these plots
fig = plt.figure()
fig.subplots_adjust(hspace=0.4, wspace=0.4)
for i in range(1, 7):
    ax = fig.add_subplot(2, 3, i)
    ax.text(0.5, 0.5, str((2, 3, i)),
           fontsize=18, ha='center')

fig, ax = plt.subplots(2, 3, sharex='col', sharey='row')

# axes are in a two-dimensional array, indexed by [row, col]
for i in range(2):
    for j in range(3):
        ax[i, j].text(0.5, 0.5, str((i, j)),
                      fontsize=18, ha='center')
fig

# Create some normally distributed data
mean = [0, 0]
cov = [[1, 1], [1, 2]]
x, y = np.random.multivariate_normal(mean, cov, 3000).T

# Set up the axes with gridspec
fig = plt.figure(figsize=(6, 6))
grid = plt.GridSpec(4, 4, hspace=0.2, wspace=0.2)
main_ax = fig.add_subplot(grid[:-1, 1:])
y_hist = fig.add_subplot(grid[:-1, 0], xticklabels=[], sharey=main_ax)
x_hist = fig.add_subplot(grid[-1, 1:], yticklabels=[], sharex=main_ax)

# scatter points on the main axes
main_ax.plot(x, y, 'ok', markersize=3, alpha=0.2)

# histogram on the attached axes
x_hist.hist(x, 40, histtype='stepfilled',
            orientation='vertical', color='gray')
x_hist.invert_yaxis()

y_hist.hist(y, 40, histtype='stepfilled',
            orientation='horizontal', color='gray')
y_hist.invert_xaxis()

#figure.savefig('.../.jpeg')
#df_sample['Periodo'] = dropna()
df_sample['Periodo'] = df_sample['Periodo'].astype('int64')

df_sample.plot(kind='scatter',x='Periodo',y='Hombres')

"""Histograms"""

plt.hist(df_sample['Periodo'])
plt.xlabel('Periodo')
plt.ylabel('Frequency')
plt.title('Frequency of Periodo')

#plt.boxplot(df_sample['Periodo'])
plt.boxplot(df_sample['Periodo'], showmeans=True, meanline=True)
plt.ylabel('Periodo count')
plt.title('Box Plot of Periodo count')